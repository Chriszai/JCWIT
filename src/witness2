<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
    <default>&lt;command-line&gt;</default>
  </key>
  <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
  <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
  <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
    <default>false</default>
  </key>
  <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
    <default>false</default>
  </key>
  <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
    <default>false</default>
  </key>
  <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
    <default>false</default>
  </key>
  <key attr.name="cyclehead" attr.type="boolean" for="node" id="cyclehead">
    <default>false</default>
  </key>
  <key attr.name="threadId" attr.type="int" for="edge" id="threadId">
    <default>0</default>
  </key>
  <key attr.name="createThread" attr.type="int" for="edge" id="createThread">
    <default>0</default>
  </key>
  <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
  <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
  <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
  <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
  <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
  <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
  <key attr.name="creationtime" attr.type="string" for="graph" id="creationtime"/>
  <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
  <key attr.name="control" attr.type="string" for="edge" id="control"/>
  <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
  <key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/>
  <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
  <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
  <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
  <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
  <graph edgedefault="directed">
    <data key="sourcecodelang">C</data>
    <node id="sink">
      <data key="invariant">anonlocal::2i = 18;</data>
      <data key="invariant.scope">java::test.main:([Ljava/lang/String;)V</data>
    </node>
    <node id="210.18">
      <data key="entry">true</data>
    </node>
    <edge source="210.18" target="211.32">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="210.19"/>
    <node id="210.21"/>
    <node id="210.23"/>
    <node id="210.25"/>
    <node id="210.27"/>
    <node id="210.29"/>
    <node id="211.32">
      <data key="invariant">dynamic_object = nondet_symbol&lt;struct java::array[reference]&gt;(symex::nondet1);</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="211.32" target="214.46">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="211.34"/>
    <node id="211.36"/>
    <node id="211.38"/>
    <node id="211.40"/>
    <node id="214.46">
      <data key="invariant">dynamic_object.@java.lang.Object.@class_identifier = "java::array[reference]";</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="214.46" target="217.50">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="217.50">
      <data key="invariant">dynamic_object.@java.lang.Object.@class_identifier = "java::array[reference]";</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="217.50" target="218.51">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="218.51">
      <data key="invariant">dynamic_object.data = (void **)dynamic_array;</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="218.51" target="230.85">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="218.53"/>
    <node id="218.55"/>
    <node id="218.57"/>
    <node id="218.59"/>
    <node id="218.61"/>
    <node id="230.85">
      <data key="invariant">dynamic_array = ARRAY_OF(null);</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="230.85" target="243.345">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="230.121"/>
    <node id="230.157"/>
    <node id="230.193"/>
    <node id="230.229"/>
    <node id="243.345">
      <data key="invariant">dynamic_object$1 = nondet_symbol&lt;char [INFINITY()]&gt;(symex::nondet5);</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="243.345" target="1.347">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="1.347">
      <data key="invariant">arg0a = &amp;dynamic_object;</data>
      <data key="invariant.scope">__CPROVER__start</data>
    </node>
    <edge source="1.347" target="2.348">
      <data key="originfile">test.java</data>
      <data key="startline">3</data>
    </edge>
    <node id="2.348">
      <data key="invariant">anonlocal::1i = 4;</data>
      <data key="invariant.scope">java::test.main:([Ljava/lang/String;)V</data>
    </node>
    <edge source="2.348" target="6.350">
      <data key="originfile">test.java</data>
      <data key="startline">4</data>
    </edge>
    <node id="6.350"/>
    <edge source="6.350" target="7.351">
      <data key="originfile">test.java</data>
      <data key="startline">5</data>
    </edge>
    <node id="7.351">
      <data key="invariant">anonlocal::2i = 10;</data>
      <data key="invariant.scope">java::test.main:([Ljava/lang/String;)V</data>
    </node>
    <edge source="7.351" target="sink">
      <data key="originfile">test.java</data>
      <data key="startline">6</data>
    </edge>
  </graph>
</graphml>
